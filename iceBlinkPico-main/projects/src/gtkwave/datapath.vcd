$date
	Mon Mar 31 20:30:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module datapath_tb $end
$var wire 32 ! write_data [31:0] $end
$var wire 32 " read_data [31:0] $end
$var wire 32 # pc [31:0] $end
$var wire 32 $ mem_addr [31:0] $end
$var wire 32 % alu_result [31:0] $end
$var reg 4 & alu_op [3:0] $end
$var reg 1 ' alu_src $end
$var reg 1 ( branch $end
$var reg 1 ) clk $end
$var reg 32 * instr [31:0] $end
$var reg 32 + mem_data [31:0] $end
$var reg 1 , mem_read $end
$var reg 1 - mem_to_reg $end
$var reg 1 . mem_write $end
$var reg 1 / reg_write $end
$var reg 1 0 reset $end
$scope module DUT $end
$var wire 4 1 alu_op [3:0] $end
$var wire 1 ' alu_src $end
$var wire 1 ( branch $end
$var wire 1 ) clk $end
$var wire 32 2 instr [31:0] $end
$var wire 32 3 mem_addr [31:0] $end
$var wire 32 4 mem_data [31:0] $end
$var wire 1 , mem_read $end
$var wire 1 - mem_to_reg $end
$var wire 1 . mem_write $end
$var wire 32 5 read_data [31:0] $end
$var wire 1 / reg_write $end
$var wire 1 0 reset $end
$var wire 32 6 write_data [31:0] $end
$var wire 1 7 zero $end
$var wire 5 8 rs2 [4:0] $end
$var wire 5 9 rs1 [4:0] $end
$var wire 32 : reg_data2 [31:0] $end
$var wire 32 ; reg_data1 [31:0] $end
$var wire 5 < rd [4:0] $end
$var wire 32 = alu_result [31:0] $end
$var reg 32 > imm [31:0] $end
$var reg 32 ? next_pc [31:0] $end
$var reg 32 @ pc [31:0] $end
$scope module ALU $end
$var wire 4 A alu_op [3:0] $end
$var wire 32 B b [31:0] $end
$var wire 32 C a [31:0] $end
$var reg 32 D result [31:0] $end
$var reg 32 E shift_amount [31:0] $end
$var reg 1 7 zero $end
$upscope $end
$scope module RF $end
$var wire 1 ) clk $end
$var wire 5 F rd [4:0] $end
$var wire 1 / reg_write $end
$var wire 5 G rs1 [4:0] $end
$var wire 5 H rs2 [4:0] $end
$var wire 32 I write_data [31:0] $end
$var wire 32 J read_data2 [31:0] $end
$var wire 32 K read_data1 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b100 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
17
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
10
0/
0.
0-
0,
b0 +
b0 *
0)
0(
0'
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#5
1)
#10
0)
#15
1)
#20
0)
00
#25
b1000 ?
b100 #
b100 @
1)
#30
0)
b110011 *
b110011 2
1/
#35
b1100 ?
b1000 #
b1000 @
1)
#40
b101 I
07
b101 $
b101 3
b101 %
b101 =
b101 D
b101 E
b101 B
bx !
bx 6
bx :
bx J
b101 >
b101 8
b101 H
b10 <
b10 F
0)
b10100000000000100010011 *
b10100000000000100010011 2
1'
#45
b10000 ?
b1100 #
b1100 @
1)
#50
b0 I
17
b0 $
b0 3
b0 %
b0 =
b0 D
b0 E
b0 B
b101 !
b101 6
b101 :
b101 J
b0 >
b10 8
b10 H
b0 <
b0 F
0)
b1000000010000000100011 *
b1000000010000000100011 2
1.
0/
#55
b10100 ?
b10000 #
b10000 @
1)
#60
b0 !
b0 6
b0 :
b0 J
b0 8
b0 H
b11 <
b11 F
0)
b10000110000011 *
b10000110000011 2
1,
0.
1-
1/
#65
b11000 ?
b10100 #
b10100 @
1)
#70
b101 I
07
b101 $
b101 3
b101 %
b101 =
b101 D
b101 ;
b101 C
b101 K
b11 >
b10 9
b10 G
b11 8
b11 H
b100 <
b100 F
0)
b1100010000001000110011 *
b1100010000001000110011 2
0,
0-
0'
#75
b11100 ?
b11000 #
b11000 @
1)
#80
0)
#85
b100000 ?
b11100 #
b11100 @
1)
#90
0)
